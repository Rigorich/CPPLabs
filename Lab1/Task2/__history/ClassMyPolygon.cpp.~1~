//---------------------------------------------------------------------------

#pragma hdrstop

#include "ClassMyPolygon.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

class MyPolygon : public IMyFigure {
	private:
		int Area;
		int Perimeter;

		PixelMap<int> GetFigureMap(){

			PixelMap<int> tmp;
			ForAllPixels {
                tmp[x][y] = 0;
			}

			double tmpPerimeter = 0.0;
			for (int i = 0; i < Vrts.size(); i++)
				tmpPerimeter += Distance( Vrts[fori(i)] , Vrts[fori(i+1)] );
			Perimeter = round(tmpPerimeter);

			long long SummX = 0, SummY = 0;
			int MinY = Vrts[0].y;
			for(int i = 0; i < Vrts.size(); i++)
				MinY = min(MinY, Vrts[i].y);

			for(int i = 0; i < Vrts.size(); i++) {
				Dot D1 = Vrts[fori(i)], D2 = Vrts[fori(i+1)];
				int add = (D1.x < D2.x) ? 1 : -1;
				if(add == -1){
					swap(D1, D2);
				}
				for(int x = max(0, D1.x); x < min(ScreenWidth, D2.x); x++)
				if(D1.x != D2.x) {
					int MaxY = D1.y + (D2.y-D1.y) * Div(x-D1.x, D2.x-D1.x);
					for(int y = max(0, MinY); y < min(ScreenHeight, MaxY); y++){
						tmp[x][y] += add;
					}
				}
			}

			Area = 0;
			ForAllPixels {
				if(tmp[x][y]){
					Area++;
					SummX += x;
					SummY += y;
				}
			}
			MassCentre.x = round(Div(SummX, Area));
			MassCentre.y = round(Div(SummY, Area));

			return tmp;
		}
		PixelMap<MyColor> GetDrawMap(){
			PixelMap<int> tmp = GetFigureMap();
			PixelMap<MyColor> Ans;
			ForAllPixels {
				if(tmp[x][y])
					Ans[x][y] = Inside;
			}
			return Ans;
		}
		int fori(int i){
			while(i < 0){
				i += Vrts.size();
			}
			while(i >= Vrts.size()){
				i -= Vrts.size();
			}
			return i;
		}

	public:
		vector<Dot> Vrts;
		MyColor Border;
		MyColor Inside;
		int BorderWidth;
		void Draw(TCanvas* canvas){

            GetFigureMap();

			/*
			PixelMap<MyColor> tmp = GetDrawMap();

			ForAllPixels {
				if(!tmp[x][y].Clear)
					canvas->Pixels[x][y] = Inside;
			}

			DrawBorder(canvas);
			*/


			canvas->Pen->Width = BorderWidth;
			canvas->Pen->Color = Border;
			canvas->Brush->Color = Inside;
			vector<TPoint> temp;
			for(int i = 0; i < Vrts.size(); i++)
				temp.push_back(Vrts[i]);
			temp.push_back(Vrts[0]);
			ShowMessage(( (Inside == clTrans) ? "TRANS" : "REALCOLOR"));
			canvas->Polygon(&(temp[0]), Vrts.size() - ((Inside == clTrans) ? 0 : 1));


			if(MassCentre.x && MassCentre.y){
				canvas->MoveTo(MassCentre.x, MassCentre.y);
				canvas->Pen->Width = 5;
				canvas->Pen->Color = clBlack;
				canvas->LineTo(MassCentre.x, MassCentre.y);
				canvas->Pen->Width = 3;
				canvas->Pen->Color = clRed;
				canvas->LineTo(MassCentre.x, MassCentre.y);
			}

			DrawFuncCentre(canvas);
		}
		void DrawBorder(TCanvas* canvas){
			canvas->Pen->Width = BorderWidth;
			canvas->Pen->Color = Border;
			for(int i = 0; i < Vrts.size(); i++) {
				canvas->MoveTo(Vrts[fori(i)].x, Vrts[fori(i)].y);
				canvas->LineTo(Vrts[fori(i+1)].x, Vrts[fori(i+1)].y);
			}
		}
		void Move(int dx, int dy){
			for(int i = 0; i < Vrts.size(); i++)
				Vrts[i] = Dot{Vrts[i].x + dx, Vrts[i].y + dy};
		}
		void Rotate(int angle){
			double a = Div(angle,180)*PI;
			for(int i = 0; i < Vrts.size(); i++){
				int x = Vrts[i].x, y = Vrts[i].y,
					x0 = FuncCentre.x, y0 = FuncCentre.y;
				Vrts[i].x = x0 + (x - x0) * cos(a) - (y - y0) * sin(a);
				Vrts[i].y = y0 + (y - y0) * cos(a) + (x - x0) * sin(a);
			}
		}
		void Scale(int percentage){
			double scl = (double)percentage / 100;
			for(int i = 0; i < Vrts.size(); i++)
				Vrts[i].x = FuncCentre.x + (int)round((Vrts[i].x-FuncCentre.x) * scl),
				Vrts[i].y = FuncCentre.y + (int)round((Vrts[i].y-FuncCentre.y) * scl);
		}
		Dot GetMassCentre() { return MassCentre; };
		void SetMassCentre(Dot where) {
			Move(where.x - MassCentre.x, where.y - MassCentre.y);
            MassCentre = where;
		}
		int GetArea(){ return Area; }
		int GetPerimeter(){ return Perimeter; }

		MyPolygon(int width, MyColor border, MyColor inside){
			BorderWidth = width;
			Border = border;
			Inside = inside;
		}
		MyPolygon(int width, MyColor border): MyPolygon(width, border, clTrans) { }
		MyPolygon(int width): MyPolygon(width, MyColor(clBlack), clTrans) { }
		MyPolygon(): MyPolygon(2, MyColor(clBlack), clTrans) { }
} TmpPolygon, *CurPolygon;
