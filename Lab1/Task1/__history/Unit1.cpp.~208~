//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

double DegToRad(int x){
	return ((double)x)/180*acos(-1);
}

double dsin(int x){
	return sin(DegToRad(x));
}
double dcos(int x){
	return cos(DegToRad(x));
}

class MyRectangle{
	public:
		int xpos, ypos;
		int width, height;
		int angle;

		MyRectangle(int x, int y, int w, int h, int a = 0){
			xpos = x; ypos = y;
			width = w; height = h;
			angle = a;
		}
		MyRectangle(){
			MyRectangle(0,0,0,0,0);
		}

		void Show(){
			int tx, ty;
			Form1->Canvas->MoveTo(xpos,ypos);
			tx = xpos, ty = ypos;
			tx += round(width * dcos(angle)), ty -= round(width * dsin(angle));
			Form1->Canvas->LineTo(tx,ty);
			tx += round(height * dsin(angle)), ty += round(height * dcos(angle));
			Form1->Canvas->LineTo(tx,ty);
			Form1->Canvas->MoveTo(xpos,ypos);
            tx = xpos, ty = ypos;
			tx += round(height * dsin(angle)), ty += round(height * dcos(angle));
			Form1->Canvas->LineTo(tx,ty);
			tx += round(width * dcos(angle)), ty -= round(width * dsin(angle));
			Form1->Canvas->LineTo(tx,ty);
		}
		void Fill(){
			int tx = xpos, ty = ypos;
			tx += round(width * dcos(angle)), ty -= round(width * dsin(angle));
			tx += round(height * dsin(angle)), ty += round(height * dcos(angle));
			Form1->Canvas->FloodFill((xpos+tx)/2,(ypos+ty)/2,Form1->Canvas->Pixels[(xpos+tx)/2][(ypos+ty)/2],fsSurface);
		}
		void Move(int dx, int dy){
			xpos += dx;
			ypos += dy;
		}
};

class MyFlagman : public MyRectangle{

	public:
		int LineWidth = 10;
		int LeftHandAngle, RightHandAngle;
		MyRectangle TempFlag;
		int FlagWidth = 30, FlagHeight = 60;

		using MyRectangle::MyRectangle;

	private:
		void ShowFlag(int xbegin, int ybegin, int flagangle, bool reflect = false){
			TempFlag.width = FlagWidth;
			TempFlag.height = FlagHeight;
			TempFlag.xpos = xbegin - reflect * TempFlag.width*dcos(flagangle);
			TempFlag.ypos = ybegin + reflect * TempFlag.width*dsin(flagangle);
			TempFlag.angle = flagangle;
			Form1->Canvas->Pen->Color = clBlack;
			Form1->Canvas->Pen->Width = 3;
			TempFlag.Show();
			Form1->Canvas->Brush->Color = clRed;
			TempFlag.Fill();
		}
		void ShowHand(int xbegin, int ybegin, int handangle){
			Form1->Canvas->Pen->Color = clBlack;
			Form1->Canvas->Pen->Width = LineWidth;
			Form1->Canvas->MoveTo(xbegin, ybegin);
			Form1->Canvas->LineTo(Form1->Canvas->PenPos.x+height*dsin(handangle), Form1->Canvas->PenPos.y+height*dcos(handangle));
			Form1->Canvas->Pen->Width = LineWidth*2;
			Form1->Canvas->LineTo(Form1->Canvas->PenPos.x, Form1->Canvas->PenPos.y);
			Form1->Canvas->Pen->Width = LineWidth/2;
			Form1->Canvas->Pen->Color = clMaroon;
			Form1->Canvas->LineTo(Form1->Canvas->PenPos.x+(height/2+FlagHeight)*dsin(handangle), Form1->Canvas->PenPos.y+(height/2+FlagHeight)*dcos(handangle));
			Form1->Canvas->MoveTo(Form1->Canvas->PenPos.x-FlagHeight*dsin(handangle), Form1->Canvas->PenPos.y-FlagHeight*dcos(handangle));
		}
	public:
		void Show(TCanvas* canvas){
			int r = width/3;

			ShowHand(xpos+width+LineWidth, ypos, RightHandAngle);
			ShowFlag(Form1->Canvas->PenPos.x, Form1->Canvas->PenPos.y, RightHandAngle, true);

			ShowHand(xpos-LineWidth, ypos, LeftHandAngle);
			ShowFlag(Form1->Canvas->PenPos.x, Form1->Canvas->PenPos.y, LeftHandAngle);

			canvas->Brush->Color = clWhite;
			//Тело
			canvas->Pen->Width = LineWidth;
			canvas->Pen->Color = clBlack;
			MyRectangle::Show();
			//Плечи
			canvas->Pen->Width = LineWidth*2;
			canvas->MoveTo(xpos-LineWidth/2,ypos);
			canvas->LineTo(xpos-LineWidth/2,ypos);
			canvas->MoveTo(xpos+width+LineWidth/2,ypos);
			canvas->LineTo(xpos+width+LineWidth/2,ypos);
			//Голова
			canvas->Pen->Width = LineWidth;
			canvas->Ellipse(xpos+width/2-r,ypos-r*2,xpos+width/2+r,ypos);
			//Ноги
			canvas->Pen->Width = LineWidth;
			canvas->MoveTo(xpos+r,ypos+height);
			canvas->LineTo(xpos+r,ypos+height+height-r);
			canvas->MoveTo(xpos+width-r,ypos+height);
			canvas->LineTo(xpos+width-r,ypos+height+height-r);
		}

} *Test = new MyFlagman(385, 400, 100, 200, 0);
//---------------------------------------------------------------------------

void Redraw()
{
	TBitmap* tmp = new TBitmap();
	tmp->Width = 1920;
	tmp->Height = 1080;
	tmp->Canvas->Pen->Color = clWhite;
	tmp->Canvas->Brush->Color = clWhite;
	tmp->Canvas->Rectangle(0,0,1920,1080);

	Test->Show(tmp->Canvas);

	Form1->Canvas->Pen->Color = clWhite;
	Form1->Canvas->Brush->Color = clWhite;
	Form1->Canvas->Rectangle(0,0,1920,1080);

	Form1->Canvas->CopyRect(Rect(0,0,1920,1080), tmp->Canvas, Rect(0,0,1920,1080));
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RightHandTrackBarChange(TObject *Sender)
{
	Test->RightHandAngle = 180 - (RightHandTrackBar->Position * (180/RightHandTrackBar->Max));
	Redraw();
}

void __fastcall TForm1::LeftHandTrackBarChange(TObject *Sender)
{
	Test->LeftHandAngle = 180 - (-LeftHandTrackBar->Position * (180/LeftHandTrackBar->Max));
	Redraw();
}

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
	Timer1->Enabled = false;
	/*
	LeftHandTrackBar->Position = LeftHandTrackBar->Max;
	RightHandTrackBar->Position = RightHandTrackBar->Max;
	Redraw();
	*/
}

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	ShowMessage("Hello!");
	LeftHandTrackBar->Position = LeftHandTrackBar->Max;
	RightHandTrackBar->Position = RightHandTrackBar->Max;
	Redraw();
}
//---------------------------------------------------------------------------

